/*
 *  @author Amit
 */

import java.io.*;
import java.util.*;
		public class A  {
			static int count=0;

			public static void main (String[] args) throws FileNotFoundException {
				
				String file="D:\\input.txt";
				Scanner in = new Scanner(new FileReader(file));
				int[][] entry=new int[5][5];
				int i=0;
				
				while(in.hasNextLine())
				{
					String temp=in.nextLine();
					
					int d=5-temp.length();
					for (int add=0;add<d;add++)
						temp=temp+" ";
					for (int col=0;col<5;col++)
					{	int en; 
						if (temp.charAt(col)=='#')
							en=1;
						else
							en=0;
						entry[i][col]=en;
					}
					
					
				}
				System.out.println("Number of Islands is: " +
                        countIslands(entry));
				
			}
			
			static int countIslands(int a[][])
			     {
			        int n = 5;
			        int m = 5;
			 
			        DisjointUnionSets dus = new DisjointUnionSets(n*m);
			 
			        for (int j=0; j<n; j++)
			        {
			            for (int k=0; k<m; k++)
			            {
			                
			                if (a[j][k] == 0)
			                    continue;

			                if (j+1 < n && a[j+1][k]==1)
			                    dus.union(j*(m)+k, (j+1)*(m)+k);
			                if (j-1 >= 0 && a[j-1][k]==1)
			                    dus.union(j*(m)+k, (j-1)*(m)+k);
			                if (k+1 < m && a[j][k+1]==1)
			                    dus.union(j*(m)+k, (j)*(m)+k+1);
			                if (k-1 >= 0 && a[j][k-1]==1)
			                    dus.union(j*(m)+k, (j)*(m)+k-1);
			                if (j+1<n && k+1<m && a[j+1][k+1]==1)
			                    dus.union(j*(m)+k, (j+1)*(m)+k+1);
			                if (j+1<n && k-1>=0 && a[j+1][k-1]==1)
			                    dus.union(j*m+k, (j+1)*(m)+k-1);
			                if (j-1>=0 && k+1<m && a[j-1][k+1]==1)
			                    dus.union(j*m+k, (j-1)*m+k+1);
			                if (j-1>=0 && k-1>=0 && a[j-1][k-1]==1)
			                    dus.union(j*m+k, (j-1)*m+k-1);
			            }
			        }
			 
			        
			        int[] c = new int[n*m];
			        int numberOfIslands = 0;
			        for (int j=0; j<n; j++)
			        {
			            for (int k=0; k<m; k++)
			            {
			                if (a[j][k]==1)
			                {
			 
			                    int x = dus.find(j*m+k);
			 
			                    // If frequency of set is 0, 
			                    // increment numberOfIslands
			                    if (c[x]==0)
			                    {
			                        numberOfIslands++;
			                        c[x]++;
			                    }
			 
			                    else
			                        c[x]++;
			                }
			            }
			        }
			        for (int cou:c)
			        	System.out.print(c+" ");
			        System.out.println();
			        return numberOfIslands;
			    }
			}
			 
			// Class to represent Disjoint Set Data structure
			class DisjointUnionSets
			{
			    int[] rank, parent;
			    int n;
			 
			    public DisjointUnionSets(int n)
			    {
			        rank = new int[n];
			        parent = new int[n];
			        this.n = n;
			        makeSet();
			    }
			 
			    void makeSet()
			    {
			        
			        for (int i=0; i<n; i++)
			            parent[i] = i;
			    }
			 
			    
			    int find(int x)
			    {
			        if (parent[x] != x)
			        {
			            
			            return find(parent[x]);
			        }
			 
			        return x;
			    }
			 
			    
			    void union(int x, int y)
			    {
			        
			        int xRoot = find(x);
			        int yRoot = find(y);
			 
			        
			        if (xRoot == yRoot)
			            return;
			 
			        
			        if (rank[xRoot] < rank[yRoot])
			            parent[xRoot] = yRoot;
			 
			        
			        else if(rank[yRoot]<rank[xRoot])
			            parent[yRoot] = xRoot;
			 
			        else  
			        {
			           
			            parent[yRoot] = xRoot;
			 
			            
			            rank[xRoot] = rank[xRoot] + 1;
			        }
			    }
				

	}



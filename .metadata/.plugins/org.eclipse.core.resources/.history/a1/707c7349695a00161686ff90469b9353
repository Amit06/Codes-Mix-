/*
 *  @author Amit
 */

import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.InputMismatchException;

class LOC1 
{
	public static void main(String[] args)
	{
		InputReader in = new InputReader(System.in);
		OutputWriter out = new OutputWriter(System.out);
		
		int tc = in.readInt();
		int cc=in.readInt();
		int c[]=IOUtils.readIntArray(in, tc);
		int k[]=IOUtils.readIntArray(in, cc);
		boolean b[]=new boolean[tc];
		Arrays.fill(b, true);
		long sum=0;
		long ks=0;
		for(int j=0;j<cc;j++)
		{
			ks+=c[k[j]-1];
			b[k[j]-1]=false;
			System.out.println(ks);
			
		}
		for(boolean bl:b)
			System.out.print(bl+" ");
		System.out.println();
		for(int i=0;i<(tc-1);i++)
		{
			if(i>0 && !b[i-1])
			{
				sum-=c[i-1]*c[i];
			}
			System.out.println(i+" "+(i+1));
			if(b[i] && b[i+1]){
				System.out.print("Here 1 "+(c[i]*(c[i+1]+ks)));
			sum+=c[i]*(c[i+1]+ks);}
			else if(b[i] && !b[i+1])
			{
				System.out.print("Here 2 "+(c[i]*(ks)));
				sum+=c[i]*(ks);
			}
			else if(!b[i] && b[i+1])
			{
				System.out.print("Here 3 "+(c[i]*(c[i+1]))+" "+c[i]+" ");
				sum+=c[i]*(c[i+1]);
			}
		
			else 
			{
				System.out.print("Here 9 "+(c[i]*(ks-c[i]))+" "+c[i]+" "+(ks-c[i]));
				sum+=c[i]*(ks-c[i]);
			}
			System.out.println();
			
		}
		if(!b[0] && !b[tc-1])
		{
			sum+=c[tc-1]*(ks-c[tc-1]);
			System.out.print("Here 4 "+(c[0]*(c[tc-1]+ks)));
			System.out.println();
		}
		else if(b[0] && !b[tc-1])
		{
			sum+=c[tc-1]*(c[0]+ks-c[tc-1]);
			System.out.print("Here 5 "+(c[0]*(ks)));
			System.out.println();
		}
		else if(!b[0] && b[tc-1])
		{
			sum+=c[tc-1]*(ks);
			System.out.print("Here 6 "+(c[0]*(c[tc-1])));
			System.out.println();
		}
		else 
		{
			sum+=c[tc-1]*(c[0]+ks);
			System.out.print("Here 7 "+(c[0]*(ks-c[0])));
			System.out.println();
		}
		
		
		
		out.printLine(sum);
		out.flush();
	}
}


class InputReader {
	
	private InputStream stream;
	private byte[] buf = new byte[1024];
	private int curChar;
	private int numChars;
	private SpaceCharFilter filter;
	
	public InputReader(InputStream stream) {
		this.stream = stream;
	}
	
	public int read() {
		if (numChars == -1)
			throw new InputMismatchException();
		if (curChar >= numChars) {
			curChar = 0;
			try {
				numChars = stream.read(buf);
			} catch (IOException e) {
				throw new InputMismatchException();
			}
			if (numChars <= 0)
				return -1;
		}
		return buf[curChar++];
	}
	
	public int readInt() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		int sgn = 1;
		if (c == '-') {
			sgn = -1;
			c = read();
		}
		int res = 0;
		do {
			if (c < '0' || c > '9')
				throw new InputMismatchException();
			res *= 10;
			res += c - '0';
			c = read();
		} while (!isSpaceChar(c));
		return res * sgn;
	}
	
	public String readString() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		StringBuilder res = new StringBuilder();
		do {
			res.appendCodePoint(c);
			c = read();
		} while (!isSpaceChar(c));
		return res.toString();
	}
	
	public boolean isSpaceChar(int c) {
		if (filter != null)
			return filter.isSpaceChar(c);
		return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
	}
	
	public String next() {
		return readString();
	}
	
	public interface SpaceCharFilter {
		public boolean isSpaceChar(int ch);
	}
}

class OutputWriter {
	private final PrintWriter writer;
	
	public OutputWriter(OutputStream outputStream) {
		writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));
	}
	
	public OutputWriter(Writer writer) {
		this.writer = new PrintWriter(writer);
	}
	
	public void print(Object... objects) {
		for (int i = 0; i < objects.length; i++) {
			if (i != 0)
				writer.print(' ');
			writer.print(objects[i]);
		}
	}
	
	public void printLine(Object... objects) {
		print(objects);
		writer.println();
	}
	
	public void close() {
		writer.close();
	}
	
	public void flush() {
		writer.flush();
	}
	
}

class IOUtils {
	
	public static int[] readIntArray(InputReader in, int size) {
		int[] array = new int[size];
		for (int i = 0; i < size; i++)
			array[i] = in.readInt();
		return array;
	}
	
}


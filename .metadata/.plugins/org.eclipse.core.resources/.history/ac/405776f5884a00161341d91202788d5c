'''
Created on Jul 15, 2016

@author: Amit
'''
import heapq

def prim(a,n,m):
    Nodes={}
    graph={}
    for x in range(1,n+1):
        Nodes[x]=[float('inf'),None]
        graph[x]=[]
    for x in a:
        graph[x[0]]+=[x[1]]
    dist={}
    for x in a:
        dist[(x[0],x[1])]=x[2]
    Nodes[a[0][0]]=[0,None]
    print Nodes
    print graph
    print dist
    Ans=[]
    
    while(Nodes):
        print Nodes
        Q=sorted(Nodes,key=lambda x:Nodes[x][1])
        print "\nQ--",Q
        v=Q[0]
        print "\nv--",v
        Ans.append(Nodes[v])
        u=Nodes.pop(Q.pop(0))
        print "\nu--",u
        for adj in graph[v]:
            print "\nadj--",adj
            if adj in Q and dist[v,adj]<Nodes[adj][0]:
                Nodes[v]=[u[1],v]
    
    print Ans
        
    
def main():
    f=open('Prims.txt','r')
    a=[]
    for l in f:
        a.append(map(int,l.split()))
    
    N,M=a[0][0],a[0][1]
    a=a[1:]
    
    a=[[1,2,1],[2,3,2],[3,4,3],[1,4,4]]
    prim(a,4,4)






if __name__ == '__main__':
    main()
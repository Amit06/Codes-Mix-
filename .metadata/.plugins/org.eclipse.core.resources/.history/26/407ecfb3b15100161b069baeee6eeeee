def adj(x):
    ans=[]
    xn=[i for i in x]
    for p,i in enumerate(xn):
        if i=='a':
            ans.append(''.join(xn[:p]+['b']+xn[p+1:]))
            ans.append(''.join(xn[:p]+['c']+xn[p+1:]))
        elif i=='z':
            ans.append(''.join(xn[:p]+['a']+xn[p+1:]))
            ans.append(''.join(xn[:p]+['y']+xn[p+1:]))
        else:
            ans.append(''.join(xn[:p]+[chr(ord(i)+1)]+xn[p+1:]))
            ans.append(''.join(xn[:p]+[chr(ord(i)-1)]+xn[p+1:]))
    
    return ans


start=raw_input()
end=raw_input()
forbid=[i for i in raw_input().split()]

graph={}
def ag(x):
    
    if x not in graph:
        graph[x]=adj(x)
        
    for nbr in graph[x]:
        if nbr not in graph:
            ag(nbr)
        
    
st='bcdefghijklmnopqrstuvwxyz'
ag(start)
print graph
visited=set()
d=[]
for i in range(len(graph)):
    d.append(-1)
queue=[start]
ctr=0
while queue:
    u=queue.pop(0)
    
    if u==end:
        break
    if u not in visited:
        visited.add(u)
        queue.extend(set(graph[u]) - visited)
        
print ctr
        
        
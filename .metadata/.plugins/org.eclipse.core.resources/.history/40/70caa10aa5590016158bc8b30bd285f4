/*
 *  @author Amit
 */
 
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.InputMismatchException;
 
 
class LOC1
{
	public int maxValue(int array[]){
		  List<Integer> list = new ArrayList<Integer>();
		  for (int i = 0; i < array.length; i++) {
		    list.add(array[i]);
		  }
		 return Collections.max(list);
	static int max(int a, int b) { return (a > b)? a : b; }
	public static void main(String[] args)
	{
		InputReader in = new InputReader(System.in);
		OutputWriter out = new OutputWriter(System.out);
		int tc = in.readInt();
		for (int test = 0; test < tc; test++) {
			int courses=in.readInt();
			int stud=in.readInt();
			int[] c=new int[courses];
			int[] t=new int[courses];
			for(int i=0;i<courses;i++)
			{
				t[i]=in.readInt();
				c[i]=in.readInt();
			}
			int time[]=IOUtils.readIntArray(in, stud);
			
			
			for(int j=0;j<stud;j++)
			{
				int x=knapSack(time[j], t, c, courses);
				out.print(x+" ");
			}
			out.printLine();
		}
		out.flush();
	}
	static int knapSack(int W, int wt[], int val[], int n)
    {
         int i, w;
	 int K[][] = new int[n+1][W+1];
	 
	 // Build table K[][] in bottom up manner
	 for (i = 0; i <= n; i++)
	 {
	     for (w = 0; w <= W; w++)
	     {
	         if (i==0 || w==0)
	              K[i][w] = 0;
	         else if (wt[i-1] <= w)
	               K[i][w] = max(val[i-1] + K[i-1][w-wt[i-1]],  K[i-1][w]);
	         else
	               K[i][w] = K[i-1][w];
	     }
	  }
	 
	  return K[n][W];
    }
}
 
 
class InputReader {
	
	private InputStream stream;
	private byte[] buf = new byte[1024];
	private int curChar;
	private int numChars;
	private SpaceCharFilter filter;
	
	public InputReader(InputStream stream) {
		this.stream = stream;
	}
	
	public int read() {
		if (numChars == -1)
			throw new InputMismatchException();
		if (curChar >= numChars) {
			curChar = 0;
			try {
				numChars = stream.read(buf);
			} catch (IOException e) {
				throw new InputMismatchException();
			}
			if (numChars <= 0)
				return -1;
		}
		return buf[curChar++];
	}
	
	public int readInt() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		int sgn = 1;
		if (c == '-') {
			sgn = -1;
			c = read();
		}
		int res = 0;
		do {
			if (c < '0' || c > '9')
				throw new InputMismatchException();
			res *= 10;
			res += c - '0';
			c = read();
		} while (!isSpaceChar(c));
		return res * sgn;
	}
	
	public String readString() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		StringBuilder res = new StringBuilder();
		do {
			res.appendCodePoint(c);
			c = read();
		} while (!isSpaceChar(c));
		return res.toString();
	}
	
	public boolean isSpaceChar(int c) {
		if (filter != null)
			return filter.isSpaceChar(c);
		return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
	}
	
	public String next() {
		return readString();
	}
	
	public interface SpaceCharFilter {
		public boolean isSpaceChar(int ch);
	}
}
 
class OutputWriter {
	private final PrintWriter writer;
	
	public OutputWriter(OutputStream outputStream) {
		writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));
	}
	
	public OutputWriter(Writer writer) {
		this.writer = new PrintWriter(writer);
	}
	
	public void print(Object... objects) {
		for (int i = 0; i < objects.length; i++) {
			if (i != 0)
				writer.print(' ');
			writer.print(objects[i]);
		}
	}
	
	public void printLine(Object... objects) {
		print(objects);
		writer.println();
	}
	
	public void close() {
		writer.close();
	}
	
	public void flush() {
		writer.flush();
	}
	
}
 
class IOUtils {
	
	public static int[] readIntArray(InputReader in, int size) {
		int[] array = new int[size];
		for (int i = 0; i < size; i++)
			array[i] = in.readInt();
		return array;
	}
	
}
 